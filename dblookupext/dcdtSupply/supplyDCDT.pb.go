// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: supplyDCDT.proto

package dcdtSupply

import (
	fmt "fmt"
	github_com_TerraDharitri_drt_go_chain_core_data "github.com/TerraDharitri/drt-go-chain-core/data"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SupplyDCDT is used to store information a shard dcdt token supply
type SupplyDCDT struct {
	Supply           *math_big.Int `protobuf:"bytes,1,opt,name=Supply,proto3,casttypewith=math/big.Int;github.com/TerraDharitri/drt-go-chain-core/data.BigIntCaster" json:"value"`
	Burned           *math_big.Int `protobuf:"bytes,2,opt,name=Burned,proto3,casttypewith=math/big.Int;github.com/TerraDharitri/drt-go-chain-core/data.BigIntCaster" json:"burned"`
	Minted           *math_big.Int `protobuf:"bytes,3,opt,name=Minted,proto3,casttypewith=math/big.Int;github.com/TerraDharitri/drt-go-chain-core/data.BigIntCaster" json:"minted"`
	RecomputedSupply bool          `protobuf:"varint,4,opt,name=RecomputedSupply,proto3" json:"recomputedSupply"`
}

func (m *SupplyDCDT) Reset()      { *m = SupplyDCDT{} }
func (*SupplyDCDT) ProtoMessage() {}
func (*SupplyDCDT) Descriptor() ([]byte, []int) {
	return fileDescriptor_d87b40c35824510b, []int{0}
}
func (m *SupplyDCDT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SupplyDCDT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SupplyDCDT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupplyDCDT.Merge(m, src)
}
func (m *SupplyDCDT) XXX_Size() int {
	return m.Size()
}
func (m *SupplyDCDT) XXX_DiscardUnknown() {
	xxx_messageInfo_SupplyDCDT.DiscardUnknown(m)
}

var xxx_messageInfo_SupplyDCDT proto.InternalMessageInfo

func (m *SupplyDCDT) GetSupply() *math_big.Int {
	if m != nil {
		return m.Supply
	}
	return nil
}

func (m *SupplyDCDT) GetBurned() *math_big.Int {
	if m != nil {
		return m.Burned
	}
	return nil
}

func (m *SupplyDCDT) GetMinted() *math_big.Int {
	if m != nil {
		return m.Minted
	}
	return nil
}

func (m *SupplyDCDT) GetRecomputedSupply() bool {
	if m != nil {
		return m.RecomputedSupply
	}
	return false
}

func init() {
	proto.RegisterType((*SupplyDCDT)(nil), "proto.SupplyDCDT")
}

func init() { proto.RegisterFile("supplyDCDT.proto", fileDescriptor_d87b40c35824510b) }

var fileDescriptor_d87b40c35824510b = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0xd1, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x06, 0xe0, 0x98, 0xd2, 0x08, 0x59, 0x0c, 0x55, 0xc4, 0x50, 0x31, 0xbc, 0x54, 0x4c, 0x5d,
	0x92, 0x0c, 0x8c, 0x2c, 0x28, 0xcd, 0xd2, 0x81, 0xa5, 0x54, 0x20, 0xb1, 0x39, 0xb1, 0x49, 0x2c,
	0x35, 0x71, 0xe4, 0xda, 0x48, 0x6c, 0x1c, 0x81, 0x23, 0x30, 0x22, 0x4e, 0xc2, 0xd8, 0xb1, 0x53,
	0xa1, 0xee, 0x82, 0x3a, 0xf5, 0x08, 0x08, 0xa7, 0x02, 0x04, 0x6b, 0xa7, 0xe4, 0xff, 0x6d, 0xbf,
	0x4f, 0xb2, 0x71, 0x67, 0xaa, 0xeb, 0x7a, 0x72, 0x9f, 0x0c, 0x92, 0x71, 0x58, 0x4b, 0xa1, 0x84,
	0xd7, 0xb6, 0x9f, 0xe3, 0x20, 0xe7, 0xaa, 0xd0, 0x69, 0x98, 0x89, 0x32, 0xca, 0x45, 0x2e, 0x22,
	0x5b, 0xa7, 0xfa, 0xd6, 0x26, 0x1b, 0xec, 0x5f, 0x73, 0xea, 0xe4, 0xa9, 0x85, 0xf1, 0xe5, 0xf7,
	0x28, 0xaf, 0xc2, 0x6e, 0x93, 0xba, 0xa8, 0x87, 0xfa, 0x87, 0xf1, 0xd5, 0x7a, 0xe1, 0xb7, 0xef,
	0xc8, 0x44, 0xb3, 0x97, 0x37, 0x7f, 0x58, 0x12, 0x55, 0x44, 0x29, 0xcf, 0xc3, 0x61, 0xa5, 0xce,
	0x7e, 0x39, 0x63, 0x26, 0x25, 0x49, 0x0a, 0x22, 0xb9, 0x92, 0x3c, 0xa2, 0x52, 0x05, 0xb9, 0x08,
	0xb2, 0x82, 0xf0, 0x2a, 0xc8, 0x84, 0x64, 0x11, 0x25, 0x8a, 0x84, 0x31, 0xcf, 0x87, 0x95, 0x1a,
	0x90, 0xa9, 0x62, 0x72, 0xb4, 0x55, 0x3c, 0x81, 0xdd, 0x58, 0xcb, 0x8a, 0xd1, 0xee, 0x9e, 0xf5,
	0xae, 0xd7, 0x0b, 0xdf, 0x4d, 0x6d, 0xb3, 0x63, 0xb0, 0x61, 0xbe, 0xc0, 0x0b, 0x5e, 0x29, 0x46,
	0xbb, 0xad, 0x1f, 0xb0, 0xb4, 0xcd, 0x8e, 0xc1, 0x86, 0xf1, 0xce, 0x71, 0x67, 0xc4, 0x32, 0x51,
	0xd6, 0x5a, 0x31, 0xba, 0xbd, 0xdb, 0xfd, 0x1e, 0xea, 0x1f, 0xc4, 0x47, 0xeb, 0x85, 0xdf, 0x91,
	0x7f, 0xd6, 0x46, 0xff, 0x76, 0xc7, 0xc9, 0x6c, 0x09, 0xce, 0x7c, 0x09, 0xce, 0x66, 0x09, 0xe8,
	0xc1, 0x00, 0x7a, 0x36, 0x80, 0x5e, 0x0d, 0xa0, 0x99, 0x01, 0x34, 0x37, 0x80, 0xde, 0x0d, 0xa0,
	0x0f, 0x03, 0xce, 0xc6, 0x00, 0x7a, 0x5c, 0x81, 0x33, 0x5b, 0x81, 0x33, 0x5f, 0x81, 0x73, 0x83,
	0x69, 0x46, 0x55, 0x33, 0x25, 0x75, 0xed, 0x7b, 0x9f, 0x7e, 0x06, 0x00, 0x00, 0xff, 0xff, 0x8d,
	0x80, 0x1e, 0x66, 0x39, 0x02, 0x00, 0x00,
}

func (this *SupplyDCDT) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SupplyDCDT)
	if !ok {
		that2, ok := that.(SupplyDCDT)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	{
		__caster := &github_com_TerraDharitri_drt_go_chain_core_data.BigIntCaster{}
		if !__caster.Equal(this.Supply, that1.Supply) {
			return false
		}
	}
	{
		__caster := &github_com_TerraDharitri_drt_go_chain_core_data.BigIntCaster{}
		if !__caster.Equal(this.Burned, that1.Burned) {
			return false
		}
	}
	{
		__caster := &github_com_TerraDharitri_drt_go_chain_core_data.BigIntCaster{}
		if !__caster.Equal(this.Minted, that1.Minted) {
			return false
		}
	}
	if this.RecomputedSupply != that1.RecomputedSupply {
		return false
	}
	return true
}
func (this *SupplyDCDT) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dcdtSupply.SupplyDCDT{")
	s = append(s, "Supply: "+fmt.Sprintf("%#v", this.Supply)+",\n")
	s = append(s, "Burned: "+fmt.Sprintf("%#v", this.Burned)+",\n")
	s = append(s, "Minted: "+fmt.Sprintf("%#v", this.Minted)+",\n")
	s = append(s, "RecomputedSupply: "+fmt.Sprintf("%#v", this.RecomputedSupply)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSupplyDCDT(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SupplyDCDT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SupplyDCDT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SupplyDCDT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecomputedSupply {
		i--
		if m.RecomputedSupply {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	{
		__caster := &github_com_TerraDharitri_drt_go_chain_core_data.BigIntCaster{}
		size := __caster.Size(m.Minted)
		i -= size
		if _, err := __caster.MarshalTo(m.Minted, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSupplyDCDT(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		__caster := &github_com_TerraDharitri_drt_go_chain_core_data.BigIntCaster{}
		size := __caster.Size(m.Burned)
		i -= size
		if _, err := __caster.MarshalTo(m.Burned, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSupplyDCDT(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		__caster := &github_com_TerraDharitri_drt_go_chain_core_data.BigIntCaster{}
		size := __caster.Size(m.Supply)
		i -= size
		if _, err := __caster.MarshalTo(m.Supply, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSupplyDCDT(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintSupplyDCDT(dAtA []byte, offset int, v uint64) int {
	offset -= sovSupplyDCDT(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SupplyDCDT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	{
		__caster := &github_com_TerraDharitri_drt_go_chain_core_data.BigIntCaster{}
		l = __caster.Size(m.Supply)
		n += 1 + l + sovSupplyDCDT(uint64(l))
	}
	{
		__caster := &github_com_TerraDharitri_drt_go_chain_core_data.BigIntCaster{}
		l = __caster.Size(m.Burned)
		n += 1 + l + sovSupplyDCDT(uint64(l))
	}
	{
		__caster := &github_com_TerraDharitri_drt_go_chain_core_data.BigIntCaster{}
		l = __caster.Size(m.Minted)
		n += 1 + l + sovSupplyDCDT(uint64(l))
	}
	if m.RecomputedSupply {
		n += 2
	}
	return n
}

func sovSupplyDCDT(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSupplyDCDT(x uint64) (n int) {
	return sovSupplyDCDT(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SupplyDCDT) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SupplyDCDT{`,
		`Supply:` + fmt.Sprintf("%v", this.Supply) + `,`,
		`Burned:` + fmt.Sprintf("%v", this.Burned) + `,`,
		`Minted:` + fmt.Sprintf("%v", this.Minted) + `,`,
		`RecomputedSupply:` + fmt.Sprintf("%v", this.RecomputedSupply) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSupplyDCDT(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SupplyDCDT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSupplyDCDT
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SupplyDCDT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SupplyDCDT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupplyDCDT
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSupplyDCDT
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSupplyDCDT
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_TerraDharitri_drt_go_chain_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Supply = tmp
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Burned", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupplyDCDT
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSupplyDCDT
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSupplyDCDT
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_TerraDharitri_drt_go_chain_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Burned = tmp
				}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minted", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupplyDCDT
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSupplyDCDT
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSupplyDCDT
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_TerraDharitri_drt_go_chain_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Minted = tmp
				}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecomputedSupply", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupplyDCDT
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecomputedSupply = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSupplyDCDT(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSupplyDCDT
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSupplyDCDT(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSupplyDCDT
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSupplyDCDT
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSupplyDCDT
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSupplyDCDT
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSupplyDCDT
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSupplyDCDT
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSupplyDCDT        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSupplyDCDT          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSupplyDCDT = fmt.Errorf("proto: unexpected end of group")
)
